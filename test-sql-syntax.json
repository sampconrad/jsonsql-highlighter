{
  "test_queries": {
    "basic_select": "SELECT * FROM users WHERE id = 1",
    "complex_query": "SELECT u.name, p.title FROM users u INNER JOIN posts p ON u.id = p.user_id WHERE u.active = 1 AND p.published = 'true'",
    "with_functions": "SELECT COUNT(*), AVG(price), MAX(created_at), MIN(updated_at) FROM products WHERE category = 'electronics'",
    "case_statement": "SELECT CASE WHEN age <= 25 THEN 'young' WHEN age <= 50 THEN 'middle' ELSE 'senior' END as age_group FROM users",
    "string_functions": "SELECT UPPER(name), LOWER(email), LENGTH(description), SUBSTR(phone, 1, 3) FROM contacts",
    "date_functions": "SELECT CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, DATETIME('now'), DATE('2023-01-01') FROM events",
    "with_comments": "SELECT * FROM users -- This is a line comment WHERE id = 1 /* This is a block comment with multiple lines that should be highlighted properly */",
    "nested_comments": "SELECT * FROM users /* Outer comment with -- inner line comment */ WHERE id = 1",
    "operators": "SELECT * FROM products WHERE price >= 100 AND price <= 500 OR category = 'electronics' AND stock > 0",
    "comparison_operators": "SELECT * FROM data WHERE value = 10 AND value <> 20 AND value < 30 AND value > 5 AND value <= 25 AND value >= 15",
    "like_patterns": "SELECT * FROM products WHERE name LIKE '%phone%' AND description GLOB '*.jpg' AND code REGEXP '^[A-Z]{2}[0-9]{4}$'",
    "in_operators": "SELECT * FROM users WHERE status IN ('active', 'pending', 'verified') AND id NOT IN (1, 2, 3)",
    "between_operators": "SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31' AND amount BETWEEN 100 AND 1000",
    "exists_operators": "SELECT * FROM users u WHERE EXISTS (SELECT 1 FROM orders o WHERE o.user_id = u.id) AND NOT EXISTS (SELECT 1 FROM bans b WHERE b.user_id = u.id)",
    "null_checks": "SELECT * FROM products WHERE description IS NOT NULL AND category IS NULL AND price IS NOT NULL",
    "aggregate_functions": "SELECT category, COUNT(*) as count, SUM(price) as total, AVG(price) as average, MIN(price) as min_price, MAX(price) as max_price FROM products GROUP BY category HAVING COUNT(*) > 5",
    "window_functions": "SELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) as rank, RANK() OVER (ORDER BY salary DESC) as salary_rank FROM employees",
    "subqueries": "SELECT * FROM users WHERE id IN (SELECT user_id FROM orders WHERE total > 1000) AND created_at > (SELECT MAX(created_at) FROM users WHERE status = 'inactive')",
    "unions": "SELECT name, 'user' as type FROM users UNION ALL SELECT title, 'product' as type FROM products UNION SELECT description, 'category' as type FROM categories",
    "joins": "SELECT u.name, p.title, c.name as category FROM users u LEFT JOIN posts p ON u.id = p.user_id RIGHT JOIN categories c ON p.category_id = c.id FULL OUTER JOIN tags t ON p.id = t.post_id",
    "with_variables": "SELECT * FROM products WHERE id = <IDM> AND category = '<CATEGORY>' AND status = '<STATUS>'",
    "string_literals": "SELECT * FROM products WHERE name = 'iPhone 15' AND description = 'Latest smartphone' AND code = 'IPH15'",
    "numeric_literals": "SELECT * FROM products WHERE price = 999.99 AND quantity = 100 AND discount = 0.15 AND rating = 4.5",
    "boolean_literals": "SELECT * FROM products WHERE active = true AND featured = false AND available = 1 AND discontinued = 0",
    "array_access": "SELECT * FROM products WHERE tags[0] = 'electronics' AND features[1] = 'wireless' AND specs['color'] = 'black'",
    "json_functions": "SELECT JSON_EXTRACT(data, '$.name') as name, JSON_OBJECT('id', id, 'name', name) as json_obj FROM products",
    "regex_functions": "SELECT * FROM products WHERE name REGEXP '^[A-Z][a-z]+ [0-9]+$' AND description MATCH 'phone|mobile|smart'",
    "math_functions": "SELECT ROUND(price, 2) as rounded_price, ABS(discount) as abs_discount, RANDOM() as random_num FROM products",
    "text_functions": "SELECT TRIM(name) as trimmed_name, LTRIM(description) as left_trimmed, RTRIM(code) as right_trimmed FROM products",
    "type_conversion": "SELECT CAST(price AS TEXT) as price_text, TYPEOF(created_at) as date_type FROM products",
    "conditional_functions": "SELECT IFNULL(description, 'No description') as desc, COALESCE(alt_name, name, 'Unknown') as display_name FROM products",
    "complex_nested": "SELECT CASE WHEN (CASE WHEN IfNull(ComplementoAplicacao3_1, '') IN ('','-','...','TODOS', '>', '<') THEN 1960 ELSE ComplementoAplicacao3_1 END) <= 25 THEN '20' ELSE '19' END || substr((CASE WHEN IfNull(ComplementoAplicacao3_1, '') IN ('','-','...','TODOS', '>', '<') THEN 1960 ELSE ComplementoAplicacao3_1 END), length((CASE WHEN IfNull(ComplementoAplicacao3_1, '') IN ('','-','...','TODOS', '>', '<') THEN 1960 ELSE ComplementoAplicacao3_1 END))-1)) FROM applications",
    "mixed_content": "SELECT u.name, p.title, 'Active' as status FROM users u JOIN posts p ON u.id = p.user_id WHERE u.active = 1 /* User is active */ AND p.published = 'true' -- Post is published",
    "special_characters": "SELECT * FROM data WHERE value = 'test@example.com' AND code = 'ABC-123' AND path = '/home/user/file.txt'",
    "empty_strings": "SELECT * FROM products WHERE name = '' AND description = '' AND code = ''",
    "null_values": "SELECT * FROM products WHERE name IS NULL AND description IS NOT NULL AND price IS NULL",
    "escaped_strings": "SELECT * FROM products WHERE description = 'Product with \"quotes\" and \\'apostrophes\\'' AND name = 'Product with \\n newline'",
    "unicode_strings": "SELECT * FROM products WHERE name = 'Café' AND description = 'Produit français' AND title = '产品名称'"
  },
  "edge_cases": {
    "empty_query": "",
    "single_word": "SELECT",
    "just_comment": "-- This is just a comment",
    "just_block_comment": "/* This is just a block comment */",
    "unclosed_comment": "/* This comment is not closed",
    "unclosed_string": "SELECT * FROM users WHERE name = 'unclosed string",
    "nested_quotes": "SELECT * FROM users WHERE description = 'User with \"nested quotes\" and \\'apostrophes\\''",
    "special_operators": "SELECT * FROM data WHERE value = 10 AND value != 20 AND value <> 30 AND value <= 25 AND value >= 15",
    "regex_patterns": "SELECT * FROM products WHERE name REGEXP '^[A-Z][a-z]+ [0-9]+$' AND code MATCH '^[A-Z]{2}[0-9]{4}$'",
    "math_expressions": "SELECT (price * 1.1) as price_with_tax, (quantity - reserved) as available, (rating * 100) as percentage FROM products"
  }
}
